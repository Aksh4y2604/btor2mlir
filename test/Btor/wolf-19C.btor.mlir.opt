module attributes {llvm.data_layout = ""} {
  llvm.func @__VERIFIER_error()
  llvm.func @nd_bv64_st3() -> i64
  llvm.func @btor2mlir_print_state_num(i64, i64, i64)
  llvm.func @nd_bv64_st2() -> i64
  llvm.func @main() {
    %0 = llvm.mlir.constant(false) : i1
    %1 = llvm.call @nd_bv64_st2() : () -> i64
    %2 = llvm.trunc %1 : i64 to i33
    %3 = llvm.call @nd_bv64_st3() : () -> i64
    %4 = llvm.trunc %3 : i64 to i33
    llvm.br ^bb1(%0, %0, %2, %4 : i1, i1, i33, i33)
  ^bb1(%5: i1, %6: i1, %7: i33, %8: i33):  // 2 preds: ^bb0, ^bb2
    %9 = llvm.mlir.constant(true) : i1
    %10 = llvm.xor %7, %8  : i33
    %11 = llvm.mlir.constant(-1 : i33) : i33
    %12 = llvm.xor %10, %11  : i33
    %13 = llvm.mlir.constant(2 : i33) : i33
    %14 = llvm.lshr %12, %13  : i33
    %15 = llvm.trunc %14 : i33 to i1
    %16 = llvm.mlir.constant(true) : i1
    %17 = llvm.xor %15, %16  : i1
    %18 = llvm.and %6, %17  : i1
    %19 = llvm.and %18, %9  : i1
    %20 = llvm.mlir.constant(50 : i33) : i33
    %21 = llvm.and %5, %9  : i1
    %22 = llvm.mlir.constant(true) : i1
    %23 = llvm.xor %21, %22  : i1
    llvm.cond_br %23, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.br ^bb1(%19, %9, %20, %20 : i1, i1, i33, i33)
  ^bb3:  // pred: ^bb1
    llvm.call @__VERIFIER_error() : () -> ()
    llvm.unreachable
  }
}

