;; Produced with Z3_solver_to_string()
(declare-fun sea.sp0_0 () (_ BitVec 64))
(declare-fun main@entry_0 () Bool)
(declare-fun main@_3_0 () Bool)
(declare-fun main@%_0_0 () (_ BitVec 8))
(declare-fun main@%_2_0 () (_ BitVec 8))
(declare-fun |tuple(main@entry_0, main@verifier.error_0)| () Bool)
(declare-fun main@verifier.error_0 () Bool)
(declare-fun main@verifier.error.split_0 () Bool)
(assert (= #b000 ((_ extract 2 0) sea.sp0_0)))
(assert (bvule sea.sp0_0 #x00000000c0000000))
(assert (bvuge sea.sp0_0 #x00000000bf700000))
(assert (=> main@_3_0 (and main@_3_0 main@entry_0)))
(assert (=> (and main@_3_0 main@entry_0) (not (= main@%_0_0 #xff))))
(assert (=> main@_3_0 (= main@%_2_0 #xff)))
(assert (=> |tuple(main@entry_0, main@verifier.error_0)| main@entry_0))
(assert (=> main@verifier.error_0
    (or (and main@verifier.error_0 main@_3_0)
        |tuple(main@entry_0, main@verifier.error_0)|)))
(assert (=> |tuple(main@entry_0, main@verifier.error_0)| (= main@%_0_0 #xff)))
(assert (=> main@verifier.error.split_0
    (and main@verifier.error.split_0 main@verifier.error_0)))
(assert main@verifier.error.split_0)

(check-sat)
